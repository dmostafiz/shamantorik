datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  email       String  @unique
  userName    String?
  fullName    String?
  displayName String?
  avatar      String?
  bio         String?
  quote       String?
  phoneNo     String?
  isNew       Boolean @default(true)
  role        String  @default("user")
  posts       Post[]

  serialPosts SerialPost[]

  postComments Comment[] @relation(name: "comentingUser")
  getComments  Comment[] @relation(name: "postAuthor")

  followerIds String[] @db.ObjectId
  followers   User[]   @relation(name: "followers", fields: [followerIds], references: [id])

  followingIds String[] @db.ObjectId
  followings   User[]   @relation(name: "followers", fields: [followingIds], references: [id])

  sendingNotificationIds String[]       @db.ObjectId
  sendingNotifications   Notification[] @relation(name: "sender")

  notificationIds String[]       @db.ObjectId
  notifications   Notification[] @relation(name: "receiver")

  views AuthorView[]

  postLikes Like[]

  password String?

  gender String?

  birthDate DateTime?

  birthPlace String?

  profession String?

  rank Int @default(0)

  // true, false
  isActive Boolean @default(false)

  verificationToken String?

  isBanned Boolean? @default(false)

  verifiedAt DateTime?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  savedPosts SavedPost[]

  PostViews PostView[]
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  authorId String? @db.ObjectId
  author   User?   @relation(fields: [authorId], references: [id])

  // normal, multiStep
  postType String @default("normal")

  // new, old
  // postStatus String @default("new")

  part Int?

  parentId String?     @db.ObjectId
  parent   SerialPost? @relation(name: "serial", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  title   String?
  slug    String?
  content String?
  image   String?

  images String[]

  categories  Category[] @relation(fields: [categoryIDs], references: [id])
  categoryIDs String[]   @db.ObjectId

  // drafted, published
  status String @default("drafted")

  commentIds String[]  @db.ObjectId
  comments   Comment[]

  views PostView[]

  likes Like[]

  rank Int @default(0)

  hasPublished Boolean  @default(false)
  isDeleted    Boolean? @default(false)
  isDeclined   Boolean? @default(false)

  savedPosts SavedPost[]

  publishedAt DateTime?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model SerialPost {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  authorId String? @db.ObjectId
  author   User?   @relation(fields: [authorId], references: [id])

  childrenIds String[] @db.ObjectId
  children    Post[]   @relation(name: "serial")

  title   String?
  content String?
  image   String?
  images  String[]

  categories  Category[] @relation(fields: [categoryIDs], references: [id])
  categoryIDs String[]   @db.ObjectId

  // published, paused
  status String @default("published")

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  slug        String?
  description String?

  isAdmin Boolean @default(false)

  rank Int @default(0)

  postIDs String[] @db.ObjectId
  posts   Post[]   @relation(fields: [postIDs], references: [id])

  SerialPost   SerialPost[] @relation(fields: [serialPostId], references: [id])
  serialPostId String[]     @db.ObjectId
}

model Like {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  postId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  authorId String? @db.ObjectId
  author   User?   @relation(fields: [authorId], references: [id])
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  authorId String? @db.ObjectId
  author   User?   @relation(name: "comentingUser", fields: [authorId], references: [id])

  userId String? @db.ObjectId
  user   User?   @relation(name: "postAuthor", fields: [userId], references: [id])

  postId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  parentId String?  @db.ObjectId
  parent   Comment? @relation(name: "comment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  childs Comment[] @relation("comment")

  // post | reply
  type String? @default("post")

  rank Int @default(0)

  content String

  isDeleted Boolean? @default(false)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Notification {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  senderId String? @db.ObjectId
  sender   User?   @relation(name: "sender", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId String? @db.ObjectId
  user   User?   @relation(name: "receiver", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  commentId String?
  postId    String?
  likeId    String?

  text String?
  link String?

  count Int @default(0)

  // like | comment | reply
  type String?

  seen Boolean @default(false)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model PostView {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  postId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  ip       String?
  device   String?
  os       String?
  platform String?
  browser  String?
}

model AuthorView {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  ip       String?
  device   String?
  os       String?
  platform String?
  browser  String?
}

model SavedPost {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  postId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime? @default(now())
}
